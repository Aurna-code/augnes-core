Augnes-Local “삼각 로드맵” 통합 가이드 (v0.6 기준)

────────────────────────────────────────────────────────
1. 개요
────────────────────────────────────────────────────────
본 문서는 Augnes v0.6 파이프라인에 다음 세 가지 핵심 아이디어를 단계별로 통합하기 위한 구체적 작업 지침을 제시합니다:

  1. 목표별 후회(Regret) 모니터링 확장  
  2. 초경량 Explicit World-Model 모듈 도입  
  3. 용량-성능 대시보드 구축  

각 단계별로 목적, 통합 대상 모듈, 작업 항목, 예상 리소스 및 통합 결과를 정리했습니다.

────────────────────────────────────────────────────────
2. 단계별 세부 계획
────────────────────────────────────────────────────────

■ 1단계. 목표별 후회 모니터링 확장  
────────────────────────────────────────
▶ 목적  
  - 각 목표(goal_id)에 대한 후회(regret) 값을 기록·시각화하여 “목표별 성능 저하 ⇔ 모델 부족” 관계를 계량적으로 파악  
▶ 통합 대상  
  - JudgmentMemoryEntry 스키마: `core/models/judgment.py`  
  - 평가 파이프라인: `tools/eval_strategy_stats.py` → `data/strategy_stats.json` 집계 로직 :contentReference[oaicite:6]{index=6}  
  - 대시보드 연동: Grafana 등 외부 모니터링 도구  
▶ 주요 작업  
  1. `judgments.jsonl`에 `goal_id` 필드 추가 (이미 존재 시 스킵)  
  2. `executor.py` 피드백 저장 시점에 각 목표별 예상 최적 보상 대비 실제 보상 차이를 `regret` 값으로 계산해 함께 기록  
  3. `eval_strategy_stats.py`에 `sum_regret`, `avg_regret` 집계 로직 추가  
  4. Grafana 데이터 소스에 `strategy_stats.json` 경로 연결 후, 목표별 후회 분포 대시보드 템플릿 생성  
▶ 예상 리소스  
  - VRAM/CPU: 추가 부담 없음 (로그 I/O 수준)  
  - 개발 기간: 1일  
▶ 기대 효과  
  - 문제 목표 식별 시 우선순위 높은 subgoal 재탐색 및 데이터 수집 자동화 근거 확보  

────────────────────────────────────────

■ 2단계. 초경량 Explicit World-Model 모듈 도입  
────────────────────────────────────────
▶ 목적  
  - 암묵적(hidden) 모델 외에, 소형 Explicit 모듈로 주요 상태 전이(Δs)만 근사 추출·검증  
▶ 통합 대상  
  - 신규 파일: `agent/world_model.py`  
  - 샘플링 스크립트: `scripts/sample_transitions.py` (정책 roll-out)  
  - 학습/추론 호출: `agent/executor.py` 비동기 작업 큐 :contentReference[oaicite:7]{index=7}  
▶ 주요 작업  
  1. `world_model.py`에 1–2층 MLP 정의 (입력: s, a; 출력: Δs 예측)  
  2. `scripts/sample_transitions.py` 작성: 매 epoch마다 5–10k 샘플 수집  
  3. Executor 비동기 태스크에 “world-model 학습” 엔트리 포인트 추가  
  4. 학습 결과(예측 오차)→`data/world_model_stats.json` 저장 및 기본 대시보드 연동  
▶ 예상 리소스  
  - VRAM: 약 400–600 MB  
  - 학습 시간: 3–5 분/epoch  
  - 개발 기간: 2일  
▶ 기대 효과  
  - 주요 상태 전이 패턴 시각화로 정책 행동 이해도 향상  
  - 암묵적 모델 대비 예측 오차 분석 지표 확보  

────────────────────────────────────────

■ 3단계. 용량-성능 대시보드 구축  
────────────────────────────────────────
▶ 목적  
  - 은닉 차원(hidden_dim), replay buffer 크기(buffer_size) 등 모델 용량 변경에 따른 성능(평균 후회·avg_advantage) 변화를 실시간 비교  
▶ 통합 대상  
  - 메타 튜닝 루프: `tools/eval_strategy_stats.py` → `MetaJudgmentController` 결정 로직 :contentReference[oaicite:8]{index=8}  
  - 대시보드 스크립트: `scripts/capacity_dashboard.py`  
▶ 주요 작업  
  1. `strategy_stats.json`에 실험별 `hidden_dim`, `buffer_size`, `avg_regret`, `avg_advantage` 항목 추가  
  2. `scripts/capacity_dashboard.py` 작성: JSON 로그를 읽어 용량별 성능 그래프(예: hidden_dim vs avg_regret) 자동 생성  
  3. Grafana 또는 웹 UI에 그래프 패널 구성 및 알림(“효용 증분 < ε 시 알림”) 설정  
  4. `MetaJudgmentController`에 “용량 증설 vs 유지” 결정 기준으로 대시보드 지표 활용 로직 삽입  
▶ 예상 리소스  
  - CPU: 대시보드 데이터 처리 < 1 s/주기  
  - 개발 기간: 2일  
▶ 기대 효과  
  - 감(感) 기반 용량 조정 → 데이터 기반 의사결정으로 전환  
  - 모델 복잡도 확장 한계점 파악 및 비용-효용 최적화  

────────────────────────────────────────────────────────
3. 통합 일정 및 다음 단계
────────────────────────────────────────────────────────
| 단계 | 작업 기간 | 검증 방법            | 완료 기준                       |
| ---- | --------- | -------------------- | ------------------------------ |
| 1    | D+1       | 후회 로그 확인, 대시보드 시각화 | 목표별 `avg_regret` 그래프 생성  |
| 2    | D+3       | 학습 스크립트 실행, 예측 오차 확인 | `world_model_stats.json` 생성 및 오차 < ϵ |
| 3    | D+5       | 대시보드 그래프·알림 테스트  | 자동 용량 조정 알림 정상 동작    |

**D**: 본 통합 작업 시작일 기준일

────────────────────────────────────────────────────────
4. 참고 자료
────────────────────────────────────────────────────────
- Augnes v0.6 핵심 모듈 목록 및 상태 :contentReference[oaicite:9]{index=9}  
- SEJA v2.1 통합 현황 문서 :contentReference[oaicite:10]{index=10}  

────────────────────────────────────────────────────────
