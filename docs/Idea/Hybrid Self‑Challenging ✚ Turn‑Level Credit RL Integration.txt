# Hybrid Self‑Challenging ✚ Turn‑Level Credit RL Integration

Date: 2025‑06‑07 • Author: Augnes‑Core

## 1 | 목적

Augnes v0.6 아키텍처에 두 핵심 기법—Self‑Challenging Code‑as‑Task 생성(arXiv:2506.01716)과 Turn‑Level Credit Assignment(arXiv:2505.11821v1)—을 **파일럿 단위로 단계적** 통합해 성능·자율 학습 능력을 조기 검증하고, 위험 관리 게이트를 통해 이후 확장 여부를 결정한다.

## 2 | 하이브리드 파이프라인 개요

````
Challenger → Verifier → Executor → JML & LTM
   ①      ②          ③            ④
``` 
- **Challenger(TaskGenerator)**: Code‑as‑Task 과제 생성
- **Verifier**: 검증 함수로 고품질 과제 필터링
- **Executor(TaskSolver)**: GRPO 기반 턴별 advantage를 활용한 RL
- **JML & LTM**: 과제·턴별 메타데이터 기록 및 커리큘럼 기초

3 | 파일럿 로드맵 (P1–P2)
--------------------------
| 단계 | 목표                       | 작업 항목                                      | 기간  |
|:----:|:--------------------------|:---------------------------------------------|:-----:|
| P1   | Code‑as‑Task 파일럿 구축    | • LangGraph에 TaskGenerator/TaskSolver 노드 추가
• 5–10개 주요 툴(검색, 계산기 등) 연동      | 1주   |
| P2   | Turn‑Level RL 커넥터 적용    | • `adv_estimator.py` 모듈 + GRPO 통합
• LoRA‑8bit 미세튜닝 스크립트 작성          | 2주   |

4 | 리스크 관리 게이트
-----------------------
- **검증 함수 커버리지 ≥ 80 %**: 자동화된 테스트 커버리지 체크
- **리소스 한도**: GPU 사용량·JML 스토리지 임계치 설정
- **성능 기준**: P2 완료 시 도구 호출 성공률 ≥ 80 % 또는 복잡 쿼리 정확도 ≥ 50 % 미달 시 설계 재검토 또는 중단

5 | 평가 및 확장 조건
--------------------
- **조건 충족 시**: P3(메모리 통합) 이후 단계로 확대
- **조건 미충족 시**: 원인 분석 후 검증 함수·커리큘럼 재설계

6 | 파일럿 성공 지표
-------------------
- **도구 호출 성공률**: P2 후 ≥ 80 %
- **평균 턴별 advantage 증가율**: 초기 대비 ≥ 30 %
- **자체 생성 과제 이용 비율**: 전체 학습 데이터 중 ≥ 50 %

7 | 결론
----------
P1–P2 파일럿을 통해 낮은 비용·위험으로 핵심 병목(크레딧 희석·데이터 부족) 해소 가능성을 실증하고, 성과 기반으로 안전하게 전체 파이프라인 도입 여부를 결정하는 것이 가장 합리적이다.

````
