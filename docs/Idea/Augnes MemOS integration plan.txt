## 1. 개요

Augnes 로컬 모델(v0.6) 환경에 MemOS의 메모리 운영체제 기법을 통합하여, 장기기억과 자아 일관성을 강화하고, 메모리 거버넌스와 수명주기 관리를 구현합니다. 본 문서는 업로드된 개발 파일들을 참조하여 설계 방향, 데이터 구조, 파이프라인 통합 방안을 상세히 제시합니다.

## 2. 목표

* **장기기억 유지**: 사용자 대화 및 판단 기록을 재학습 없이 지속적으로 관리
* **자아 일관성 확보**: 과거 의사결정 맥락을 실시간 회수하여 판단 품질 향상
* **메모리 거버넌스**: TTL, 버전 관리, 감사 로그를 통한 규정 준수 및 투명성 보장
* **크로스 레이어 통합**: LangGraph 기반 Executor 파이프라인에 메모리 인터셉터 삽입

## 3. MemOS 핵심 개념 요약

1. **MemCube**: 파라메트릭·액티베이션·플레인텍스트 메모리를 통합한 추상화 객체
2. **메모리 라이프사이클 관리**: 생성, 검증, 업데이트, 폐기 단계별 정책
3. **거버넌스**: 버전 관리, 접근 제어, 감사 로그, 정책 기반 메모리 업데이트 제어

## 4. Augnes v0.6 아키텍처 개요

* Judgement → Execution → Feedback → Reflection 루프 완전 자동화 구조 fileciteturn0file4
* 핵심 모듈: `agent/executor.py`, `memory/jml.py`, `memory/hotcache.py`, `core/doc_fsm.py` 등 fileciteturn0file2
* 현재 LTM/RAG 스토어는 더미(dummy)로 구현되어 있어, 장기기억 실험 필요 fileciteturn0file4

## 5. MemOS–Augnes 매핑

| MemOS 개념  | Augnes 대응 모듈                | 설명                       |
| --------- | --------------------------- | ------------------------ |
| MemCube   | `AugnesMemUnit` dataclass   | 출처·타임스탬프·버전·TTL·메타 태그 저장 |
| 파라메트릭 기억  | LoRA 체크포인트 스냅샷              | 자주 변경되지 않는 핵심 지식 태깅      |
| 액티베이션 기억  | LangGraph 세션 State          | `conversation_buffer` 역할 |
| 플레인텍스트 기억 | FAISS/Chroma + SQLite 메타스토어 | 대화·판단 기록을 k-NN 검색용으로 저장  |
| 라이프사이클 정책 | TTL 워커 + 버전 태그 + 감사 로그      | 주기적 만료·롤백·접근 제어          |

## 6. 설계 세부사항

### 6.1 데이터 모델: `AugnesMemUnit`

```python
@dataclass
class AugnesMemUnit:
    id: str                          # UUID
    content: str | np.ndarray       # 텍스트 or 임베딩 벡터
    mem_type: Literal["activation","plaintext","parametric"]
    version: int = 1                 # 자동 증분
    ts: float = time.time()          # 타임스탬프
    ttl: int | None = 90*24*3600     # 기본 90일
    tags: list[str] = field(default_factory=list)
```

* Pydantic 모델(`core/models/judgment.py`) 확장 (advantage 필드 유사 구조) fileciteturn0file3

### 6.2 저장소 구성

1. **벡터 DB**

   * FAISS: 수백만 임베딩 인덱싱·검색 fileciteturn0file0
   * Chroma: 메타데이터, 필터링, hot-reload 지원 fileciteturn0file0
2. **메타스토어**

   * SQLite 스키마: `memory_meta(id, ts, version, src, ttl, tags)`
   * `data/strategy_stats.json`와 유사한 자동 집계 구조 적용 fileciteturn0file1
3. **감사 로그**

   * `logs/memory_audit.jsonl`: CRUD 이벤트 스트림 기록

### 6.3 라이프사이클 인터셉터

* **쓰기(write\_memory)**

  ```python
  def write_memory(unit: AugnesMemUnit):
      vec = embed(unit.content)                  # SentenceTransformer 임베딩
      chroma.insert(vec, metadata=asdict(unit))  # Chroma에 벡터+메타 저장
      sqlite.insert(unit)                         # 메타스토어 기록
      audit.log("create", unit)
  ```
* **읽기(retrieve\_memory)**

  ```python
  def retrieve_memory(query: str, k=5):
      qvec = embed(query)
      hits = chroma.search(qvec, k=k)
      return [h["metadata"]["content"] for h in hits]
  ```
* **TTL 워커**: 주기적 스케쥴러(cron)로 만료 레코드 삭제 및 audit 기록

### 6.4 LangGraph 파이프라인 통합

```mermaid
graph TD
  UserInput --> Retrieval
  Retrieval --> Executor
  Executor --> Feedback
  Feedback --> Writer
  Writer --> MemoryDB
  MemoryDB -. TTL Sweep .-> MemoryDB
```

* `Retrieval` 노드: `retrieve_memory()` 호출
* `Writer` 노드: `write_memory()` 삽입 → 모든 토큰 흐름 인터셉트
* SEJA v2.1 통합 모듈(`core/entry.py` CLI 루프)와 일관성 유지 fileciteturn0file0

## 7. 보안 및 거버넌스

* **접근 제어**: 디스크 암호화, OS 권한 설정
* **버전 태그**: 주요 변경점 스냅샷 생성·롤백
* **감사 로그**: 모든 CRUD 이벤트에 타임스탬프, 사용자 ID 포함

## 8. 성능 최적화

* **인덱스 샤딩**: 주제별/날짜별 FAISS 인덱스 분할
* **액티브 셋 캐싱**: HotCacheManager와 연동하여 최근 조회 기억 캐싱
* **비동기 I/O**: Chroma 비동기 insert/search 사용

## 9. 개발 단계 및 로드맵

1. **Sprint 1 (1주)**: `AugnesMemUnit` & DB 초기화, 메타스토어 설계
2. **Sprint 2 (1주)**: write/read 인터셉터 개발, TTL 워커 구현
3. **Sprint 3 (1주)**: LangGraph 파이프라인 노드 통합, SEJA CLI 연동 테스트
4. **Sprint 4 (2주)**: 로드 성능 테스트, 보안·거버넌스 검증, 문서화
5. **Sprint 5 (추가)**: LoRA 배치 업데이트 자동화, 복구/Revival loop 설계

## 10. 결론

Augnes 로컬 모델에 MemOS 기법을 통합함으로써, 재학습 없이도 강력한 장기기억·자아 일관성·메모리 거버넌스를 실현할 수 있습니다. 위 설계를 따르면 4\~5주 내에 v0.7 로드맵 상 주요 목표를 달성할 수 있습니다.
